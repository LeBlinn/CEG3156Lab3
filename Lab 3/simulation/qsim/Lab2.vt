// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/22/2024 11:58:54"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    SingleCycleProcessor
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module SingleCycleProcessor_vlg_sample_tst(
	GlobalClock,
	RamClock,
	Reset,
	sampler_tx
);
input  GlobalClock;
input  RamClock;
input  Reset;
output sampler_tx;

reg sample;
time current_time;
always @(GlobalClock or RamClock or Reset)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module SingleCycleProcessor_vlg_check_tst (
	ALUout,
	Instruction,
	MemOut,
	PCout,
	sampler_rx
);
input [7:0] ALUout;
input [31:0] Instruction;
input [7:0] MemOut;
input [7:0] PCout;
input sampler_rx;

reg [7:0] ALUout_expected;
reg [31:0] Instruction_expected;
reg [7:0] MemOut_expected;
reg [7:0] PCout_expected;

reg [7:0] ALUout_prev;
reg [31:0] Instruction_prev;
reg [7:0] MemOut_prev;
reg [7:0] PCout_prev;

reg [7:0] ALUout_expected_prev;
reg [31:0] Instruction_expected_prev;
reg [7:0] MemOut_expected_prev;
reg [7:0] PCout_expected_prev;

reg [7:0] last_ALUout_exp;
reg [31:0] last_Instruction_exp;
reg [7:0] last_MemOut_exp;
reg [7:0] last_PCout_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:4] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 4'b1;
end

// update real /o prevs

always @(trigger)
begin
	ALUout_prev = ALUout;
	Instruction_prev = Instruction;
	MemOut_prev = MemOut;
	PCout_prev = PCout;
end

// update expected /o prevs

always @(trigger)
begin
	ALUout_expected_prev = ALUout_expected;
	Instruction_expected_prev = Instruction_expected;
	MemOut_expected_prev = MemOut_expected;
	PCout_expected_prev = PCout_expected;
end


// expected Instruction[ 31 ]
initial
begin
	Instruction_expected[31] = 1'bX;
end 
// expected Instruction[ 30 ]
initial
begin
	Instruction_expected[30] = 1'bX;
end 
// expected Instruction[ 29 ]
initial
begin
	Instruction_expected[29] = 1'bX;
end 
// expected Instruction[ 28 ]
initial
begin
	Instruction_expected[28] = 1'bX;
end 
// expected Instruction[ 27 ]
initial
begin
	Instruction_expected[27] = 1'bX;
end 
// expected Instruction[ 26 ]
initial
begin
	Instruction_expected[26] = 1'bX;
end 
// expected Instruction[ 25 ]
initial
begin
	Instruction_expected[25] = 1'bX;
end 
// expected Instruction[ 24 ]
initial
begin
	Instruction_expected[24] = 1'bX;
end 
// expected Instruction[ 23 ]
initial
begin
	Instruction_expected[23] = 1'bX;
end 
// expected Instruction[ 22 ]
initial
begin
	Instruction_expected[22] = 1'bX;
end 
// expected Instruction[ 21 ]
initial
begin
	Instruction_expected[21] = 1'bX;
end 
// expected Instruction[ 20 ]
initial
begin
	Instruction_expected[20] = 1'bX;
end 
// expected Instruction[ 19 ]
initial
begin
	Instruction_expected[19] = 1'bX;
end 
// expected Instruction[ 18 ]
initial
begin
	Instruction_expected[18] = 1'bX;
end 
// expected Instruction[ 17 ]
initial
begin
	Instruction_expected[17] = 1'bX;
end 
// expected Instruction[ 16 ]
initial
begin
	Instruction_expected[16] = 1'bX;
end 
// expected Instruction[ 15 ]
initial
begin
	Instruction_expected[15] = 1'bX;
end 
// expected Instruction[ 14 ]
initial
begin
	Instruction_expected[14] = 1'bX;
end 
// expected Instruction[ 13 ]
initial
begin
	Instruction_expected[13] = 1'bX;
end 
// expected Instruction[ 12 ]
initial
begin
	Instruction_expected[12] = 1'bX;
end 
// expected Instruction[ 11 ]
initial
begin
	Instruction_expected[11] = 1'bX;
end 
// expected Instruction[ 10 ]
initial
begin
	Instruction_expected[10] = 1'bX;
end 
// expected Instruction[ 9 ]
initial
begin
	Instruction_expected[9] = 1'bX;
end 
// expected Instruction[ 8 ]
initial
begin
	Instruction_expected[8] = 1'bX;
end 
// expected Instruction[ 7 ]
initial
begin
	Instruction_expected[7] = 1'bX;
end 
// expected Instruction[ 6 ]
initial
begin
	Instruction_expected[6] = 1'bX;
end 
// expected Instruction[ 5 ]
initial
begin
	Instruction_expected[5] = 1'bX;
end 
// expected Instruction[ 4 ]
initial
begin
	Instruction_expected[4] = 1'bX;
end 
// expected Instruction[ 3 ]
initial
begin
	Instruction_expected[3] = 1'bX;
end 
// expected Instruction[ 2 ]
initial
begin
	Instruction_expected[2] = 1'bX;
end 
// expected Instruction[ 1 ]
initial
begin
	Instruction_expected[1] = 1'bX;
end 
// expected Instruction[ 0 ]
initial
begin
	Instruction_expected[0] = 1'bX;
end 
// expected MemOut[ 7 ]
initial
begin
	MemOut_expected[7] = 1'bX;
end 
// expected MemOut[ 6 ]
initial
begin
	MemOut_expected[6] = 1'bX;
end 
// expected MemOut[ 5 ]
initial
begin
	MemOut_expected[5] = 1'bX;
end 
// expected MemOut[ 4 ]
initial
begin
	MemOut_expected[4] = 1'bX;
end 
// expected MemOut[ 3 ]
initial
begin
	MemOut_expected[3] = 1'bX;
end 
// expected MemOut[ 2 ]
initial
begin
	MemOut_expected[2] = 1'bX;
end 
// expected MemOut[ 1 ]
initial
begin
	MemOut_expected[1] = 1'bX;
end 
// expected MemOut[ 0 ]
initial
begin
	MemOut_expected[0] = 1'bX;
end 
// expected PCout[ 7 ]
initial
begin
	PCout_expected[7] = 1'bX;
end 
// expected PCout[ 6 ]
initial
begin
	PCout_expected[6] = 1'bX;
end 
// expected PCout[ 5 ]
initial
begin
	PCout_expected[5] = 1'bX;
end 
// expected PCout[ 4 ]
initial
begin
	PCout_expected[4] = 1'bX;
end 
// expected PCout[ 3 ]
initial
begin
	PCout_expected[3] = 1'bX;
end 
// expected PCout[ 2 ]
initial
begin
	PCout_expected[2] = 1'bX;
end 
// expected PCout[ 1 ]
initial
begin
	PCout_expected[1] = 1'bX;
end 
// expected PCout[ 0 ]
initial
begin
	PCout_expected[0] = 1'bX;
end 
// expected ALUout[ 7 ]
initial
begin
	ALUout_expected[7] = 1'bX;
end 
// expected ALUout[ 6 ]
initial
begin
	ALUout_expected[6] = 1'bX;
end 
// expected ALUout[ 5 ]
initial
begin
	ALUout_expected[5] = 1'bX;
end 
// expected ALUout[ 4 ]
initial
begin
	ALUout_expected[4] = 1'bX;
end 
// expected ALUout[ 3 ]
initial
begin
	ALUout_expected[3] = 1'bX;
end 
// expected ALUout[ 2 ]
initial
begin
	ALUout_expected[2] = 1'bX;
end 
// expected ALUout[ 1 ]
initial
begin
	ALUout_expected[1] = 1'bX;
end 
// expected ALUout[ 0 ]
initial
begin
	ALUout_expected[0] = 1'bX;
end 
// generate trigger
always @(ALUout_expected or ALUout or Instruction_expected or Instruction or MemOut_expected or MemOut or PCout_expected or PCout)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected ALUout = %b | expected Instruction = %b | expected MemOut = %b | expected PCout = %b | ",ALUout_expected_prev,Instruction_expected_prev,MemOut_expected_prev,PCout_expected_prev);
	$display("| real ALUout = %b | real Instruction = %b | real MemOut = %b | real PCout = %b | ",ALUout_prev,Instruction_prev,MemOut_prev,PCout_prev);
`endif
	if (
		( ALUout_expected_prev[0] !== 1'bx ) && ( ALUout_prev[0] !== ALUout_expected_prev[0] )
		&& ((ALUout_expected_prev[0] !== last_ALUout_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUout[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUout_expected_prev);
		$display ("     Real value = %b", ALUout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALUout_exp[0] = ALUout_expected_prev[0];
	end
	if (
		( ALUout_expected_prev[1] !== 1'bx ) && ( ALUout_prev[1] !== ALUout_expected_prev[1] )
		&& ((ALUout_expected_prev[1] !== last_ALUout_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUout[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUout_expected_prev);
		$display ("     Real value = %b", ALUout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALUout_exp[1] = ALUout_expected_prev[1];
	end
	if (
		( ALUout_expected_prev[2] !== 1'bx ) && ( ALUout_prev[2] !== ALUout_expected_prev[2] )
		&& ((ALUout_expected_prev[2] !== last_ALUout_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUout[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUout_expected_prev);
		$display ("     Real value = %b", ALUout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALUout_exp[2] = ALUout_expected_prev[2];
	end
	if (
		( ALUout_expected_prev[3] !== 1'bx ) && ( ALUout_prev[3] !== ALUout_expected_prev[3] )
		&& ((ALUout_expected_prev[3] !== last_ALUout_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUout[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUout_expected_prev);
		$display ("     Real value = %b", ALUout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALUout_exp[3] = ALUout_expected_prev[3];
	end
	if (
		( ALUout_expected_prev[4] !== 1'bx ) && ( ALUout_prev[4] !== ALUout_expected_prev[4] )
		&& ((ALUout_expected_prev[4] !== last_ALUout_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUout[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUout_expected_prev);
		$display ("     Real value = %b", ALUout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALUout_exp[4] = ALUout_expected_prev[4];
	end
	if (
		( ALUout_expected_prev[5] !== 1'bx ) && ( ALUout_prev[5] !== ALUout_expected_prev[5] )
		&& ((ALUout_expected_prev[5] !== last_ALUout_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUout[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUout_expected_prev);
		$display ("     Real value = %b", ALUout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALUout_exp[5] = ALUout_expected_prev[5];
	end
	if (
		( ALUout_expected_prev[6] !== 1'bx ) && ( ALUout_prev[6] !== ALUout_expected_prev[6] )
		&& ((ALUout_expected_prev[6] !== last_ALUout_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUout[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUout_expected_prev);
		$display ("     Real value = %b", ALUout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALUout_exp[6] = ALUout_expected_prev[6];
	end
	if (
		( ALUout_expected_prev[7] !== 1'bx ) && ( ALUout_prev[7] !== ALUout_expected_prev[7] )
		&& ((ALUout_expected_prev[7] !== last_ALUout_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUout[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUout_expected_prev);
		$display ("     Real value = %b", ALUout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALUout_exp[7] = ALUout_expected_prev[7];
	end
	if (
		( Instruction_expected_prev[0] !== 1'bx ) && ( Instruction_prev[0] !== Instruction_expected_prev[0] )
		&& ((Instruction_expected_prev[0] !== last_Instruction_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_expected_prev);
		$display ("     Real value = %b", Instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Instruction_exp[0] = Instruction_expected_prev[0];
	end
	if (
		( Instruction_expected_prev[1] !== 1'bx ) && ( Instruction_prev[1] !== Instruction_expected_prev[1] )
		&& ((Instruction_expected_prev[1] !== last_Instruction_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_expected_prev);
		$display ("     Real value = %b", Instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Instruction_exp[1] = Instruction_expected_prev[1];
	end
	if (
		( Instruction_expected_prev[2] !== 1'bx ) && ( Instruction_prev[2] !== Instruction_expected_prev[2] )
		&& ((Instruction_expected_prev[2] !== last_Instruction_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_expected_prev);
		$display ("     Real value = %b", Instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Instruction_exp[2] = Instruction_expected_prev[2];
	end
	if (
		( Instruction_expected_prev[3] !== 1'bx ) && ( Instruction_prev[3] !== Instruction_expected_prev[3] )
		&& ((Instruction_expected_prev[3] !== last_Instruction_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_expected_prev);
		$display ("     Real value = %b", Instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Instruction_exp[3] = Instruction_expected_prev[3];
	end
	if (
		( Instruction_expected_prev[4] !== 1'bx ) && ( Instruction_prev[4] !== Instruction_expected_prev[4] )
		&& ((Instruction_expected_prev[4] !== last_Instruction_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_expected_prev);
		$display ("     Real value = %b", Instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Instruction_exp[4] = Instruction_expected_prev[4];
	end
	if (
		( Instruction_expected_prev[5] !== 1'bx ) && ( Instruction_prev[5] !== Instruction_expected_prev[5] )
		&& ((Instruction_expected_prev[5] !== last_Instruction_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_expected_prev);
		$display ("     Real value = %b", Instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Instruction_exp[5] = Instruction_expected_prev[5];
	end
	if (
		( Instruction_expected_prev[6] !== 1'bx ) && ( Instruction_prev[6] !== Instruction_expected_prev[6] )
		&& ((Instruction_expected_prev[6] !== last_Instruction_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_expected_prev);
		$display ("     Real value = %b", Instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Instruction_exp[6] = Instruction_expected_prev[6];
	end
	if (
		( Instruction_expected_prev[7] !== 1'bx ) && ( Instruction_prev[7] !== Instruction_expected_prev[7] )
		&& ((Instruction_expected_prev[7] !== last_Instruction_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_expected_prev);
		$display ("     Real value = %b", Instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Instruction_exp[7] = Instruction_expected_prev[7];
	end
	if (
		( Instruction_expected_prev[8] !== 1'bx ) && ( Instruction_prev[8] !== Instruction_expected_prev[8] )
		&& ((Instruction_expected_prev[8] !== last_Instruction_exp[8]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_expected_prev);
		$display ("     Real value = %b", Instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Instruction_exp[8] = Instruction_expected_prev[8];
	end
	if (
		( Instruction_expected_prev[9] !== 1'bx ) && ( Instruction_prev[9] !== Instruction_expected_prev[9] )
		&& ((Instruction_expected_prev[9] !== last_Instruction_exp[9]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_expected_prev);
		$display ("     Real value = %b", Instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Instruction_exp[9] = Instruction_expected_prev[9];
	end
	if (
		( Instruction_expected_prev[10] !== 1'bx ) && ( Instruction_prev[10] !== Instruction_expected_prev[10] )
		&& ((Instruction_expected_prev[10] !== last_Instruction_exp[10]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_expected_prev);
		$display ("     Real value = %b", Instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Instruction_exp[10] = Instruction_expected_prev[10];
	end
	if (
		( Instruction_expected_prev[11] !== 1'bx ) && ( Instruction_prev[11] !== Instruction_expected_prev[11] )
		&& ((Instruction_expected_prev[11] !== last_Instruction_exp[11]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_expected_prev);
		$display ("     Real value = %b", Instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Instruction_exp[11] = Instruction_expected_prev[11];
	end
	if (
		( Instruction_expected_prev[12] !== 1'bx ) && ( Instruction_prev[12] !== Instruction_expected_prev[12] )
		&& ((Instruction_expected_prev[12] !== last_Instruction_exp[12]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_expected_prev);
		$display ("     Real value = %b", Instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Instruction_exp[12] = Instruction_expected_prev[12];
	end
	if (
		( Instruction_expected_prev[13] !== 1'bx ) && ( Instruction_prev[13] !== Instruction_expected_prev[13] )
		&& ((Instruction_expected_prev[13] !== last_Instruction_exp[13]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_expected_prev);
		$display ("     Real value = %b", Instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Instruction_exp[13] = Instruction_expected_prev[13];
	end
	if (
		( Instruction_expected_prev[14] !== 1'bx ) && ( Instruction_prev[14] !== Instruction_expected_prev[14] )
		&& ((Instruction_expected_prev[14] !== last_Instruction_exp[14]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_expected_prev);
		$display ("     Real value = %b", Instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Instruction_exp[14] = Instruction_expected_prev[14];
	end
	if (
		( Instruction_expected_prev[15] !== 1'bx ) && ( Instruction_prev[15] !== Instruction_expected_prev[15] )
		&& ((Instruction_expected_prev[15] !== last_Instruction_exp[15]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_expected_prev);
		$display ("     Real value = %b", Instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Instruction_exp[15] = Instruction_expected_prev[15];
	end
	if (
		( Instruction_expected_prev[16] !== 1'bx ) && ( Instruction_prev[16] !== Instruction_expected_prev[16] )
		&& ((Instruction_expected_prev[16] !== last_Instruction_exp[16]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_expected_prev);
		$display ("     Real value = %b", Instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Instruction_exp[16] = Instruction_expected_prev[16];
	end
	if (
		( Instruction_expected_prev[17] !== 1'bx ) && ( Instruction_prev[17] !== Instruction_expected_prev[17] )
		&& ((Instruction_expected_prev[17] !== last_Instruction_exp[17]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_expected_prev);
		$display ("     Real value = %b", Instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Instruction_exp[17] = Instruction_expected_prev[17];
	end
	if (
		( Instruction_expected_prev[18] !== 1'bx ) && ( Instruction_prev[18] !== Instruction_expected_prev[18] )
		&& ((Instruction_expected_prev[18] !== last_Instruction_exp[18]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_expected_prev);
		$display ("     Real value = %b", Instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Instruction_exp[18] = Instruction_expected_prev[18];
	end
	if (
		( Instruction_expected_prev[19] !== 1'bx ) && ( Instruction_prev[19] !== Instruction_expected_prev[19] )
		&& ((Instruction_expected_prev[19] !== last_Instruction_exp[19]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_expected_prev);
		$display ("     Real value = %b", Instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Instruction_exp[19] = Instruction_expected_prev[19];
	end
	if (
		( Instruction_expected_prev[20] !== 1'bx ) && ( Instruction_prev[20] !== Instruction_expected_prev[20] )
		&& ((Instruction_expected_prev[20] !== last_Instruction_exp[20]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_expected_prev);
		$display ("     Real value = %b", Instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Instruction_exp[20] = Instruction_expected_prev[20];
	end
	if (
		( Instruction_expected_prev[21] !== 1'bx ) && ( Instruction_prev[21] !== Instruction_expected_prev[21] )
		&& ((Instruction_expected_prev[21] !== last_Instruction_exp[21]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_expected_prev);
		$display ("     Real value = %b", Instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Instruction_exp[21] = Instruction_expected_prev[21];
	end
	if (
		( Instruction_expected_prev[22] !== 1'bx ) && ( Instruction_prev[22] !== Instruction_expected_prev[22] )
		&& ((Instruction_expected_prev[22] !== last_Instruction_exp[22]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_expected_prev);
		$display ("     Real value = %b", Instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Instruction_exp[22] = Instruction_expected_prev[22];
	end
	if (
		( Instruction_expected_prev[23] !== 1'bx ) && ( Instruction_prev[23] !== Instruction_expected_prev[23] )
		&& ((Instruction_expected_prev[23] !== last_Instruction_exp[23]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_expected_prev);
		$display ("     Real value = %b", Instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Instruction_exp[23] = Instruction_expected_prev[23];
	end
	if (
		( Instruction_expected_prev[24] !== 1'bx ) && ( Instruction_prev[24] !== Instruction_expected_prev[24] )
		&& ((Instruction_expected_prev[24] !== last_Instruction_exp[24]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_expected_prev);
		$display ("     Real value = %b", Instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Instruction_exp[24] = Instruction_expected_prev[24];
	end
	if (
		( Instruction_expected_prev[25] !== 1'bx ) && ( Instruction_prev[25] !== Instruction_expected_prev[25] )
		&& ((Instruction_expected_prev[25] !== last_Instruction_exp[25]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_expected_prev);
		$display ("     Real value = %b", Instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Instruction_exp[25] = Instruction_expected_prev[25];
	end
	if (
		( Instruction_expected_prev[26] !== 1'bx ) && ( Instruction_prev[26] !== Instruction_expected_prev[26] )
		&& ((Instruction_expected_prev[26] !== last_Instruction_exp[26]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_expected_prev);
		$display ("     Real value = %b", Instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Instruction_exp[26] = Instruction_expected_prev[26];
	end
	if (
		( Instruction_expected_prev[27] !== 1'bx ) && ( Instruction_prev[27] !== Instruction_expected_prev[27] )
		&& ((Instruction_expected_prev[27] !== last_Instruction_exp[27]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_expected_prev);
		$display ("     Real value = %b", Instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Instruction_exp[27] = Instruction_expected_prev[27];
	end
	if (
		( Instruction_expected_prev[28] !== 1'bx ) && ( Instruction_prev[28] !== Instruction_expected_prev[28] )
		&& ((Instruction_expected_prev[28] !== last_Instruction_exp[28]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_expected_prev);
		$display ("     Real value = %b", Instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Instruction_exp[28] = Instruction_expected_prev[28];
	end
	if (
		( Instruction_expected_prev[29] !== 1'bx ) && ( Instruction_prev[29] !== Instruction_expected_prev[29] )
		&& ((Instruction_expected_prev[29] !== last_Instruction_exp[29]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_expected_prev);
		$display ("     Real value = %b", Instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Instruction_exp[29] = Instruction_expected_prev[29];
	end
	if (
		( Instruction_expected_prev[30] !== 1'bx ) && ( Instruction_prev[30] !== Instruction_expected_prev[30] )
		&& ((Instruction_expected_prev[30] !== last_Instruction_exp[30]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_expected_prev);
		$display ("     Real value = %b", Instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Instruction_exp[30] = Instruction_expected_prev[30];
	end
	if (
		( Instruction_expected_prev[31] !== 1'bx ) && ( Instruction_prev[31] !== Instruction_expected_prev[31] )
		&& ((Instruction_expected_prev[31] !== last_Instruction_exp[31]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Instruction[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Instruction_expected_prev);
		$display ("     Real value = %b", Instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Instruction_exp[31] = Instruction_expected_prev[31];
	end
	if (
		( MemOut_expected_prev[0] !== 1'bx ) && ( MemOut_prev[0] !== MemOut_expected_prev[0] )
		&& ((MemOut_expected_prev[0] !== last_MemOut_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemOut[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemOut_expected_prev);
		$display ("     Real value = %b", MemOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_MemOut_exp[0] = MemOut_expected_prev[0];
	end
	if (
		( MemOut_expected_prev[1] !== 1'bx ) && ( MemOut_prev[1] !== MemOut_expected_prev[1] )
		&& ((MemOut_expected_prev[1] !== last_MemOut_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemOut[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemOut_expected_prev);
		$display ("     Real value = %b", MemOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_MemOut_exp[1] = MemOut_expected_prev[1];
	end
	if (
		( MemOut_expected_prev[2] !== 1'bx ) && ( MemOut_prev[2] !== MemOut_expected_prev[2] )
		&& ((MemOut_expected_prev[2] !== last_MemOut_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemOut[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemOut_expected_prev);
		$display ("     Real value = %b", MemOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_MemOut_exp[2] = MemOut_expected_prev[2];
	end
	if (
		( MemOut_expected_prev[3] !== 1'bx ) && ( MemOut_prev[3] !== MemOut_expected_prev[3] )
		&& ((MemOut_expected_prev[3] !== last_MemOut_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemOut[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemOut_expected_prev);
		$display ("     Real value = %b", MemOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_MemOut_exp[3] = MemOut_expected_prev[3];
	end
	if (
		( MemOut_expected_prev[4] !== 1'bx ) && ( MemOut_prev[4] !== MemOut_expected_prev[4] )
		&& ((MemOut_expected_prev[4] !== last_MemOut_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemOut[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemOut_expected_prev);
		$display ("     Real value = %b", MemOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_MemOut_exp[4] = MemOut_expected_prev[4];
	end
	if (
		( MemOut_expected_prev[5] !== 1'bx ) && ( MemOut_prev[5] !== MemOut_expected_prev[5] )
		&& ((MemOut_expected_prev[5] !== last_MemOut_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemOut[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemOut_expected_prev);
		$display ("     Real value = %b", MemOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_MemOut_exp[5] = MemOut_expected_prev[5];
	end
	if (
		( MemOut_expected_prev[6] !== 1'bx ) && ( MemOut_prev[6] !== MemOut_expected_prev[6] )
		&& ((MemOut_expected_prev[6] !== last_MemOut_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemOut[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemOut_expected_prev);
		$display ("     Real value = %b", MemOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_MemOut_exp[6] = MemOut_expected_prev[6];
	end
	if (
		( MemOut_expected_prev[7] !== 1'bx ) && ( MemOut_prev[7] !== MemOut_expected_prev[7] )
		&& ((MemOut_expected_prev[7] !== last_MemOut_exp[7]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemOut[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemOut_expected_prev);
		$display ("     Real value = %b", MemOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_MemOut_exp[7] = MemOut_expected_prev[7];
	end
	if (
		( PCout_expected_prev[0] !== 1'bx ) && ( PCout_prev[0] !== PCout_expected_prev[0] )
		&& ((PCout_expected_prev[0] !== last_PCout_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PCout[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PCout_expected_prev);
		$display ("     Real value = %b", PCout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_PCout_exp[0] = PCout_expected_prev[0];
	end
	if (
		( PCout_expected_prev[1] !== 1'bx ) && ( PCout_prev[1] !== PCout_expected_prev[1] )
		&& ((PCout_expected_prev[1] !== last_PCout_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PCout[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PCout_expected_prev);
		$display ("     Real value = %b", PCout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_PCout_exp[1] = PCout_expected_prev[1];
	end
	if (
		( PCout_expected_prev[2] !== 1'bx ) && ( PCout_prev[2] !== PCout_expected_prev[2] )
		&& ((PCout_expected_prev[2] !== last_PCout_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PCout[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PCout_expected_prev);
		$display ("     Real value = %b", PCout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_PCout_exp[2] = PCout_expected_prev[2];
	end
	if (
		( PCout_expected_prev[3] !== 1'bx ) && ( PCout_prev[3] !== PCout_expected_prev[3] )
		&& ((PCout_expected_prev[3] !== last_PCout_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PCout[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PCout_expected_prev);
		$display ("     Real value = %b", PCout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_PCout_exp[3] = PCout_expected_prev[3];
	end
	if (
		( PCout_expected_prev[4] !== 1'bx ) && ( PCout_prev[4] !== PCout_expected_prev[4] )
		&& ((PCout_expected_prev[4] !== last_PCout_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PCout[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PCout_expected_prev);
		$display ("     Real value = %b", PCout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_PCout_exp[4] = PCout_expected_prev[4];
	end
	if (
		( PCout_expected_prev[5] !== 1'bx ) && ( PCout_prev[5] !== PCout_expected_prev[5] )
		&& ((PCout_expected_prev[5] !== last_PCout_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PCout[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PCout_expected_prev);
		$display ("     Real value = %b", PCout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_PCout_exp[5] = PCout_expected_prev[5];
	end
	if (
		( PCout_expected_prev[6] !== 1'bx ) && ( PCout_prev[6] !== PCout_expected_prev[6] )
		&& ((PCout_expected_prev[6] !== last_PCout_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PCout[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PCout_expected_prev);
		$display ("     Real value = %b", PCout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_PCout_exp[6] = PCout_expected_prev[6];
	end
	if (
		( PCout_expected_prev[7] !== 1'bx ) && ( PCout_prev[7] !== PCout_expected_prev[7] )
		&& ((PCout_expected_prev[7] !== last_PCout_exp[7]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PCout[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PCout_expected_prev);
		$display ("     Real value = %b", PCout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_PCout_exp[7] = PCout_expected_prev[7];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module SingleCycleProcessor_vlg_vec_tst();
// constants                                           
// general purpose registers
reg GlobalClock;
reg RamClock;
reg Reset;
// wires                                               
wire [7:0] ALUout;
wire [31:0] Instruction;
wire [7:0] MemOut;
wire [7:0] PCout;

wire sampler;                             

// assign statements (if any)                          
SingleCycleProcessor i1 (
// port map - connection between master ports and signals/registers   
	.ALUout(ALUout),
	.GlobalClock(GlobalClock),
	.Instruction(Instruction),
	.MemOut(MemOut),
	.PCout(PCout),
	.RamClock(RamClock),
	.Reset(Reset)
);

// Reset
initial
begin
	Reset = 1'b1;
	Reset = #10000 1'b0;
end 

// RamClock
always
begin
	RamClock = 1'b0;
	RamClock = #1000 1'b1;
	#1000;
end 

// GlobalClock
always
begin
	GlobalClock = 1'b0;
	GlobalClock = #5000 1'b1;
	#5000;
end 

SingleCycleProcessor_vlg_sample_tst tb_sample (
	.GlobalClock(GlobalClock),
	.RamClock(RamClock),
	.Reset(Reset),
	.sampler_tx(sampler)
);

SingleCycleProcessor_vlg_check_tst tb_out(
	.ALUout(ALUout),
	.Instruction(Instruction),
	.MemOut(MemOut),
	.PCout(PCout),
	.sampler_rx(sampler)
);
endmodule

